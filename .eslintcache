[{"/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/index.tsx":"1","/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/app.tsx":"2","/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/reducers/current.tsx":"3","/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/constants.ts":"4","/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/actions/current.ts":"5","/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/routes/logged-out-route.tsx":"6","/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/routes/logged-in-route.tsx":"7","/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/routes/admin-route.tsx":"8","/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/components/user/user-edit/user-edit.tsx":"9","/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/components/sidebar/sidebar.tsx":"10","/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/components/user/user-list/user-list.tsx":"11","/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/components/user/user.tsx":"12","/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/components/login/login.tsx":"13","/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/components/user/user-configuration-edit/user-configuration-edit.tsx":"14","/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/components/mentions/mentions.tsx":"15","/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/components/configurator/configurator.tsx":"16","/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/components/contact/contact.tsx":"17","/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/components/house-models/house-model-list/house-model-list.tsx":"18","/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/components/configuration/configuration.tsx":"19","/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/components/house-models/house-model-edit/house-model-edit.tsx":"20","/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/components/policies/policies.tsx":"21","/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/components/home/home.tsx":"22","/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/components/configuration-options/configuration-option-edit/configuration-option-edit.tsx":"23","/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/components/configuration-options/configuration-option-list/configuration-option-list.tsx":"24","/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/api/utils.ts":"25","/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/utils/pagination.ts":"26","/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/components/user/user-configurations/user-configurations.tsx":"27","/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/components/logout/logout.tsx":"28","/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/components/user/user-account-delete/user-account-delete.tsx":"29","/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/components/user/user-policies/user-policies.tsx":"30","/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/components/templates/items-table/items-table.tsx":"31","/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/components/templates/editor-field/editor-field.tsx":"32","/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/components/3d/3d.tsx":"33"},{"size":839,"mtime":1623312113176,"results":"34","hashOfConfig":"35"},{"size":4340,"mtime":1623317265701,"results":"36","hashOfConfig":"35"},{"size":776,"mtime":1623312113177,"results":"37","hashOfConfig":"35"},{"size":318,"mtime":1623312113176,"results":"38","hashOfConfig":"35"},{"size":2702,"mtime":1623312113039,"results":"39","hashOfConfig":"35"},{"size":703,"mtime":1623312113178,"results":"40","hashOfConfig":"35"},{"size":701,"mtime":1623312113178,"results":"41","hashOfConfig":"35"},{"size":654,"mtime":1623312113177,"results":"42","hashOfConfig":"35"},{"size":8961,"mtime":1623312113174,"results":"43","hashOfConfig":"35"},{"size":3233,"mtime":1623312113171,"results":"44","hashOfConfig":"35"},{"size":15516,"mtime":1623312113175,"results":"45","hashOfConfig":"35"},{"size":1685,"mtime":1623312113175,"results":"46","hashOfConfig":"35"},{"size":6601,"mtime":1623315465233,"results":"47","hashOfConfig":"35"},{"size":4740,"mtime":1623312113173,"results":"48","hashOfConfig":"35"},{"size":10956,"mtime":1623312113170,"results":"49","hashOfConfig":"35"},{"size":10411,"mtime":1623312113167,"results":"50","hashOfConfig":"35"},{"size":9124,"mtime":1623315465232,"results":"51","hashOfConfig":"35"},{"size":4412,"mtime":1623312113169,"results":"52","hashOfConfig":"35"},{"size":7094,"mtime":1623312113166,"results":"53","hashOfConfig":"35"},{"size":8677,"mtime":1623312113168,"results":"54","hashOfConfig":"35"},{"size":8347,"mtime":1623312113170,"results":"55","hashOfConfig":"35"},{"size":7556,"mtime":1623312113168,"results":"56","hashOfConfig":"35"},{"size":8771,"mtime":1623312113165,"results":"57","hashOfConfig":"35"},{"size":4758,"mtime":1623312113166,"results":"58","hashOfConfig":"35"},{"size":820,"mtime":1623312113040,"results":"59","hashOfConfig":"35"},{"size":327,"mtime":1623312113179,"results":"60","hashOfConfig":"35"},{"size":8700,"mtime":1623312113173,"results":"61","hashOfConfig":"35"},{"size":620,"mtime":1623312113170,"results":"62","hashOfConfig":"35"},{"size":4070,"mtime":1623312113172,"results":"63","hashOfConfig":"35"},{"size":4596,"mtime":1623312113175,"results":"64","hashOfConfig":"35"},{"size":9803,"mtime":1623312113171,"results":"65","hashOfConfig":"35"},{"size":1626,"mtime":1623312113171,"results":"66","hashOfConfig":"35"},{"size":5712,"mtime":1623317035434,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},"1f5zz1v",{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"144"},"/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/index.tsx",["145"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./app\";\nimport reportWebVitals from \"./report-web-vitals\";\nimport { Provider } from \"react-redux\";\nimport { applyMiddleware, compose, createStore } from \"redux\";\nimport thunkMiddleware from \"redux-thunk-recursion-detect\";\nimport currentReducer from \"./reducers/current\";\n\nlet composeEnhancers;\nif (\n  process.env.NODE_ENV !== \"production\" &&\n  (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n) {\n  composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\n} else {\n  composeEnhancers = compose;\n}\nconst store = createStore(\n  currentReducer,\n  undefined,\n  composeEnhancers(applyMiddleware(thunkMiddleware))\n);\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/app.tsx",["146"],"import \"./app.css\";\nimport Home from \"./components/home/home\";\nimport Sidebar from \"./components/sidebar/sidebar\";\nimport Configurator from \"./components/configurator/configurator\";\nimport Policies from \"./components/policies/policies\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { UserListWithRouter } from \"./components/user/user-list/user-list\";\nimport { UserEditWithRouter } from \"./components/user/user-edit/user-edit\";\nimport User from \"./components/user/user\";\nimport Mentions from \"./components/mentions/mentions\";\nimport Contact from \"./components/contact/contact\";\nimport HouseModelList from \"./components/house-models/house-model-list/house-model-list\";\nimport HouseModelEdit from \"./components/house-models/house-model-edit/house-model-edit\";\nimport UserConfigurationEdit from \"./components/user/user-configuration-edit/user-configuration-edit\";\nimport { ICurrent } from \"./types\";\nimport { checkAuthentication, checkAdmin } from \"./actions/current\";\nimport { connect } from \"react-redux\";\nimport LoggedInRoute from \"./routes/logged-in-route\";\nimport LoggedOutRoute from \"./routes/logged-out-route\";\nimport AdminRoute from \"./routes/admin-route\";\nimport Login from \"./components/login/login\";\nimport React from \"react\";\nimport ConfigurationOptionList from \"./components/configuration-options/configuration-option-list/configuration-option-list\";\nimport ConfigurationOptionEdit from \"./components/configuration-options/configuration-option-edit/configuration-option-edit\";\nimport Configuration from \"./components/configuration/configuration\";\n\ninterface IProps {\n  checkAuthenticationConnect: () => void;\n  isAuthenticated: boolean | null;\n  checkAdmin: () => void;\n  isAdmin: boolean | null;\n}\n\nconst App = ({ checkAuthenticationConnect, isAuthenticated }: IProps) => {\n  React.useEffect(() => {\n    checkAuthenticationConnect();\n    checkAdmin();\n  }, []);\n\n  const app =\n    isAuthenticated !== null ? (\n      <Router>\n        <Sidebar />\n        <Switch>\n\n          <LoggedInRoute\n            path=\"/config/:id\"\n            exact={true}\n            component={UserConfigurationEdit}\n          />\n          <Route path=\"/config\">\n            <Configurator />\n          </Route>\n          <Route path=\"/contact\">\n            <Contact />\n          </Route>\n          <Route path=\"/policies\">\n            <Policies />\n          </Route>\n          <Route path=\"/mentions\">\n            <Mentions />\n          </Route>\n          <LoggedOutRoute path=\"/login\" exact={true} component={Login} />\n          <LoggedInRoute path=\"/account\" exact={true} component={User} />\n\n          <LoggedInRoute\n            path=\"/configuration/:id\"\n            exact={true}\n            component={Configuration}\n          />\n\n          <AdminRoute\n            path=\"/users\"\n            exact={true}\n            component={UserListWithRouter}\n          />\n          <AdminRoute\n            path=\"/user/:id/edit\"\n            exact={true}\n            component={UserEditWithRouter}\n          />\n\n          <AdminRoute\n            path=\"/configurationOptions/add\"\n            exact={true}\n            component={ConfigurationOptionEdit}\n          />\n          <AdminRoute\n            path=\"/configurationOptions/:id\"\n            exact={true}\n            component={ConfigurationOptionEdit}\n          />\n          <AdminRoute\n            path=\"/configurationOptions\"\n            exact={true}\n            component={ConfigurationOptionList}\n          />\n\n          <AdminRoute\n            path=\"/houseModels/add\"\n            exact={true}\n            component={HouseModelEdit}\n          />\n          <AdminRoute\n            path=\"/houseModels/:id\"\n            exact={true}\n            component={HouseModelEdit}\n          />\n          <AdminRoute\n            path=\"/houseModels\"\n            exact={true}\n            component={HouseModelList}\n          />\n\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </Router>\n    ) : null;\n\n  return <div className=\"App\">{app}</div>;\n};\n\nconst mapStateToProps = (state: ICurrent) => ({\n  isAuthenticated: state.isAuthenticated,\n  isAdmin: state.isAdmin,\n});\n\nconst mapDispatchToProps = {\n  checkAuthenticationConnect: checkAuthentication,\n  checkAdmin: checkAdmin,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/reducers/current.tsx",[],"/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/constants.ts",[],"/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/actions/current.ts",[],"/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/routes/logged-out-route.tsx",[],"/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/routes/logged-in-route.tsx",[],"/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/routes/admin-route.tsx",[],"/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/components/user/user-edit/user-edit.tsx",[],"/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/components/sidebar/sidebar.tsx",[],"/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/components/user/user-list/user-list.tsx",[],"/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/components/user/user.tsx",["147"],"import React from \"react\";\nimport UserPolicies from \"./user-policies/user-policies\";\nimport UserConfigurations from \"./user-configurations/user-configurations\";\nimport { Tabs, Tab } from \"react-bootstrap\";\nimport UserAccountDelete from \"./user-account-delete/user-account-delete\";\nimport { UserProps, UserState } from \"./models\";\nimport { withRouter } from \"react-router\";\n\nclass User extends React.Component<UserProps, UserState> {\n  constructor(props: UserProps) {\n    super(props);\n  }\n\n  render() {\n    const defaultTab = \"configs\";\n    let selectedTab = this.props.location.search;\n    if (selectedTab) {\n      const result = this.props.location.search.match(/tab=([^&]*)/);\n      selectedTab = result ? result[1] : defaultTab;\n      if (![\"configs\", \"policies\", \"accountdelete\"].includes(selectedTab)) {\n        selectedTab = defaultTab;\n      }\n    }\n\n    return (\n      <main className=\"p-5 w-100\">\n        <div>\n          <Tabs\n            transition={false}\n            defaultActiveKey={selectedTab || defaultTab}\n            id=\"uncontrolled-tab-example\"\n          >\n            <Tab eventKey=\"configs\" title=\"Mes configurations\">\n              <UserConfigurations />\n            </Tab>\n            <Tab eventKey=\"policies\" title=\"Mes politiques de confidentialité\">\n              <UserPolicies />\n            </Tab>\n            <Tab\n              eventKey=\"accountdelete\"\n              title=\"Demande de suppression du compte\"\n            >\n              <UserAccountDelete />\n            </Tab>\n          </Tabs>\n        </div>\n\n        <div className=\"circle1\"></div>\n        <div className=\"circle2\"></div>\n      </main>\n    );\n  }\n}\n\nexport default withRouter(User);\n","/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/components/login/login.tsx",["148","149","150","151"],"import \"./login.css\";\nimport { InputGroup, FormControl, Button, Form } from \"react-bootstrap\";\nimport * as Yup from \"yup\";\nimport { apiRequest } from \"../../api/utils\";\nimport { logIn } from \"../../actions/current\";\nimport { connect } from \"react-redux\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faAt,\n  faCheck,\n  faTimes,\n  faSignInAlt,\n  faKey,\n  faLock,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport React from \"react\";\nimport { Formik } from \"formik\";\nimport { FormValues } from \"./form-value\";\nimport { ApiResponseError } from \"../../api/models\";\ninterface IProps {\n  logInConnect: () => void;\n}\nclass Login extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      success: 0,\n      email: null,\n      password: null,\n    };\n  }\n\n  schema = Yup.object().shape({\n    email: Yup.string().email(\"L'email doit avoir un format valide\"),\n    password: Yup.string().required(\"Le mot de passe est requis\"),\n  });\n  initialValues: FormValues = {\n    email: \"\",\n    password: \"\",\n  };\n  login(values: FormValues) {\n    fetch(`${process.env.REACT_APP_API_BASE_URL}/user/login`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        email: values.email,\n        password: values.password,\n      }),\n    })\n      .then((response) => response.json())\n      .then((datas) => {\n        console.log(datas);\n        if (datas.success) {\n          this.setState({ success: 1 });\n          apiRequest(\"userRole/\" + datas.userId, \"GET\", [])\n            .then((response) => {\n              if (response.status === \"error\") {\n                this.setState({ error: response as ApiResponseError });\n              } else {\n                let isAdmin = false;\n                if (\n                  response.filter(\n                    (role: any) =>\n                      role.id_Role == process.env.REACT_APP_ADMIN_ROLE_NUMBER\n                  ).length > 0\n                ) {\n                  isAdmin = true;\n                }\n                this.props.logInConnect(datas.token, isAdmin, datas.userId);\n              }\n            })\n            .catch((error) => console.log(error));\n        } else {\n          this.setState({ success: -1 });\n        }\n      });\n  }\n  handleChange(event: any) {\n    let nam = event.target.name;\n    let val = event.target.value;\n    this.setState({ [nam]: val });\n  }\n  render() {\n    let alertDiv;\n    if (this.state.success == 1) {\n      alertDiv = (\n        <div className=\"alert alert-success mb-4\">\n          <FontAwesomeIcon icon={faCheck} /> Connexion réussie, vous allez être\n          redirigé...\n        </div>\n      );\n    } else if (this.state.success == -1) {\n      alertDiv = (\n        <div className=\"alert alert-danger m-4\">\n          <FontAwesomeIcon icon={faTimes} /> L'identifiant ou le mot de passe\n          est incorrect.\n        </div>\n      );\n    }\n\n    return (\n      <>\n        <main className=\"p-5 w-100\">\n          <div className=\"row justify-content-center mt-5\">\n            <div className=\"col-md-5 login mt-5\">\n              <h1 className=\"text-center text-green\">\n                <FontAwesomeIcon icon={faKey} />\n              </h1>\n              <h2 className=\"text-center text-green\">Connexion</h2>\n              <h6 className=\"text-center mb-5 text-green\">\n                Veuillez vous connecter afin d'accéder à votre espace personnel\n              </h6>\n              {alertDiv}\n              <Formik\n                validationSchema={this.schema}\n                onSubmit={(values, { resetForm }) => {\n                  this.login(values);\n                  resetForm({\n                    values: {\n                      email: \"\",\n                      password: \"\",\n                    },\n                  });\n                }}\n                initialValues={this.initialValues}\n              >\n                {({ handleSubmit, handleChange, values, errors }) => (\n                  <Form\n                    noValidate\n                    className=\"form shadow-none\"\n                    onSubmit={handleSubmit}\n                  >\n                    <InputGroup className=\"mb-3\">\n                      <InputGroup.Prepend>\n                        <InputGroup.Text id=\"EMailIcon\">\n                          <FontAwesomeIcon icon={faAt} />\n                        </InputGroup.Text>\n                      </InputGroup.Prepend>\n                      <FormControl\n                        placeholder=\"Adresse email\"\n                        name=\"email\"\n                        value={values.email}\n                        onChange={(e) => {\n                          this.setState({ formValues: values });\n                          handleChange(e);\n                        }}\n                        isInvalid={!!errors.email}\n                      />\n                      <Form.Control.Feedback type=\"invalid\">\n                        {errors.email}\n                      </Form.Control.Feedback>\n                    </InputGroup>\n                    <InputGroup className=\"mb-3\">\n                      <InputGroup.Prepend>\n                        <InputGroup.Text id=\"PasswordIcon\">\n                          <FontAwesomeIcon icon={faLock} />\n                        </InputGroup.Text>\n                      </InputGroup.Prepend>\n                      <FormControl\n                        placeholder=\"Mot de passe\"\n                        name=\"password\"\n                        type=\"password\"\n                        value={values.password}\n                        onChange={(e) => {\n                          this.setState({ formValues: values });\n                          handleChange(e);\n                        }}\n                        isInvalid={!!errors.password}\n                      />\n                      <Form.Control.Feedback type=\"invalid\">\n                        {errors.password}\n                      </Form.Control.Feedback>\n                    </InputGroup>\n\n                    <Button\n                      variant=\"primary\"\n                      className=\"d-block mx-auto mt-3 p-3\"\n                      type=\"submit\"\n                    >\n                      SE CONNECTER\n                      <FontAwesomeIcon className=\"ml-2\" icon={faSignInAlt} />\n                    </Button>\n                  </Form>\n                )}\n              </Formik>\n            </div>\n          </div>\n        </main>\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  logInConnect: logIn,\n};\nexport default connect(null, mapDispatchToProps)(Login);\n","/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/components/user/user-configuration-edit/user-configuration-edit.tsx",[],"/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/components/mentions/mentions.tsx",[],"/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/components/configurator/configurator.tsx",["152","153"],"import React from \"react\";\n\nimport { Col, Row, Form, Table, Button } from \"react-bootstrap\";\nimport home_3D from \"../../assets/images/home-3D.png\";\nimport \"./configurator.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArrowCircleRight } from \"@fortawesome/free-solid-svg-icons\";\nclass Configurator extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.state = { model: null, modelSelected: 1 };\n    this.validModel = this.validModel.bind(this);\n    this.selectModel = this.selectModel.bind(this);\n  }\n  selectModel(model: any) {\n    this.setState({ modelSelected: model });\n  }\n  validModel() {\n    this.setState({ model: this.state.modelSelected });\n  }\n  render() {\n    return (\n      <main className=\"configurator p-5 w-100\">\n        <div className=\"circle1\"></div>\n        <div className=\"circle2\"></div>\n        {this.state.model == null && (\n          <div className=\"models-choice\">\n            <h3>Modèles</h3>\n            <Row>\n              <Col>\n                <div\n                  className={`model ${\n                    this.state.modelSelected == 1 ? \"selected\" : \"\"\n                  }`}\n                  onClick={(e) => this.selectModel(1)}\n                >\n                  <h4>Modèle N°1</h4>\n                  <img src={home_3D} alt=\"Home config\" className=\"w-100\" />\n                  <Table bordered hover className=\"mt-5 text-center\">\n                    <thead>\n                      <tr>\n                        <th colSpan={2}>Caractéristique du modèle N°1</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr className=\"sub\">\n                        <td colSpan={2}>Dimensions</td>\n                      </tr>\n                      <tr>\n                        <td>Longueur</td>\n                        <td>12.53m</td>\n                      </tr>\n                      <tr>\n                        <td>Largeur</td>\n                        <td>12.53m</td>\n                      </tr>\n                      <tr>\n                        <td>Hauteur sous plafond</td>\n                        <td>2.53m</td>\n                      </tr>\n                      <tr className=\"sub\">\n                        <td colSpan={2}>Autres</td>\n                      </tr>\n                      <tr>\n                        <td>Longueur</td>\n                        <td>12.53m</td>\n                      </tr>\n                      <tr>\n                        <td>Largeur</td>\n                        <td>12.53m</td>\n                      </tr>\n                      <tr>\n                        <td>Hauteur sous plafond</td>\n                        <td>2.53m</td>\n                      </tr>\n                    </tbody>\n                  </Table>\n                </div>\n              </Col>\n              <Col>\n                <div\n                  className={`model ${\n                    this.state.modelSelected == 2 ? \"selected\" : \"\"\n                  }`}\n                  onClick={(e) => this.selectModel(2)}\n                >\n                  <h4>Modèle N°2</h4>\n                  <img src={home_3D} alt=\"Home config\" className=\"w-100\" />\n                  <Table bordered hover className=\"mt-5 text-center\">\n                    <thead>\n                      <tr>\n                        <th colSpan={2}>Caractéristique du modèle N°2</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr className=\"sub\">\n                        <td colSpan={2}>Dimensions</td>\n                      </tr>\n                      <tr>\n                        <td>Longueur</td>\n                        <td>12.53m</td>\n                      </tr>\n                      <tr>\n                        <td>Largeur</td>\n                        <td>12.53m</td>\n                      </tr>\n                      <tr>\n                        <td>Hauteur sous plafond</td>\n                        <td>2.53m</td>\n                      </tr>\n                      <tr className=\"sub\">\n                        <td colSpan={2}>Autres</td>\n                      </tr>\n                      <tr>\n                        <td>Longueur</td>\n                        <td>12.53m</td>\n                      </tr>\n                      <tr>\n                        <td>Largeur</td>\n                        <td>12.53m</td>\n                      </tr>\n                      <tr>\n                        <td>Hauteur sous plafond</td>\n                        <td>2.53m</td>\n                      </tr>\n                    </tbody>\n                  </Table>\n                </div>\n              </Col>\n            </Row>\n            <Row className=\"justify-content-end\">\n              <Col md={2} className=\"col next\">\n                <div className=\"content\">\n                  <Button className=\"mt-0\" onClick={this.validModel}>\n                    SUIVANT{\" \"}\n                    <FontAwesomeIcon icon={faArrowCircleRight} size=\"lg\" />\n                  </Button>\n                </div>\n              </Col>\n            </Row>\n          </div>\n        )}\n        {this.state.model && (\n          <div>\n            <h3>Configurateur</h3>\n            <Row>\n              <Col md={8} className=\"col\">\n                <div className=\"content\">\n                  <h5>Visualisation du modèle N°{this.state.model}</h5>\n                  <img src={home_3D} alt=\"Home config\" className=\"w-100\" />\n                </div>\n              </Col>\n              <Col md={4} className=\"col\">\n                <div className=\"content options\">\n                  <h5 className=\"text-light\">Options</h5>\n                  <Form>\n                    <Form.Group controlId=\"exampleForm.ControlSelect1\">\n                      <Form.Control as=\"select\">\n                        <option>Parquet Flottant</option>\n                        <option>2</option>\n                        <option>3</option>\n                        <option>4</option>\n                        <option>5</option>\n                      </Form.Control>\n                    </Form.Group>\n                    <Form.Group controlId=\"exampleForm.ControlSelect1\">\n                      <Form.Control as=\"select\">\n                        <option>Bardage bois</option>\n                        <option>2</option>\n                        <option>3</option>\n                        <option>4</option>\n                        <option>5</option>\n                      </Form.Control>\n                    </Form.Group>\n                    <Form.Group controlId=\"exampleForm.ControlSelect1\">\n                      <Form.Control as=\"select\">\n                        <option>Ossature métale</option>\n                        <option>2</option>\n                        <option>3</option>\n                        <option>4</option>\n                        <option>5</option>\n                      </Form.Control>\n                    </Form.Group>\n                    <Form.Group controlId=\"exampleForm.ControlSelect1\">\n                      <Form.Control as=\"select\">\n                        <option>Meublé</option>\n                        <option>2</option>\n                        <option>3</option>\n                        <option>4</option>\n                        <option>5</option>\n                      </Form.Control>\n                    </Form.Group>\n                    <Form.Group controlId=\"exampleForm.ControlSelect1\">\n                      <Form.Control as=\"select\">\n                        <option>Papier peint noir</option>\n                        <option>2</option>\n                        <option>3</option>\n                        <option>4</option>\n                        <option>5</option>\n                      </Form.Control>\n                    </Form.Group>\n                    <Form.Group controlId=\"exampleForm.ControlSelect1\">\n                      <Form.Control as=\"select\">\n                        <option>Pas de terrasse</option>\n                        <option>2</option>\n                        <option>3</option>\n                        <option>4</option>\n                        <option>5</option>\n                      </Form.Control>\n                    </Form.Group>\n                    <Form.Group controlId=\"exampleForm.ControlSelect1\">\n                      <Form.Control as=\"select\">\n                        <option>Isolation passive</option>\n                        <option>2</option>\n                        <option>3</option>\n                        <option>4</option>\n                        <option>5</option>\n                      </Form.Control>\n                    </Form.Group>\n                  </Form>\n                </div>\n              </Col>\n            </Row>\n            <Row>\n              <Col md={4} className=\"col devis\">\n                <div className=\"content text-center\">\n                  <h5>Aperçu du devis</h5>\n                  <Row className=\"mb-0\">\n                    <Col>\n                      <h6>Bardage</h6>\n                      <p>10 343,56€</p>\n                    </Col>\n                    <Col>\n                      <h6>Charpente</h6>\n                      <p>10 343,56€</p>\n                    </Col>\n                    <Col>\n                      <h6>Menuiserie</h6>\n                      <p>10 343,56€</p>\n                    </Col>\n                  </Row>\n                  <div className=\"total\">34 343,23€</div>\n                </div>\n              </Col>\n              <Col md={4} className=\"col conso\">\n                <div className=\"content\">\n                  <Row>\n                    <Col md={7}>\n                      <h5>Aperçu de la consommation</h5>\n                      <p>\n                        Comparer la consommation de ce logement par rapport à\n                        des logements de références.\n                      </p>\n                    </Col>\n                    <Col md={5}></Col>\n                  </Row>\n                </div>\n              </Col>\n              <Col md={4} className=\"col next\">\n                <div className=\"content\">\n                  <Button>\n                    SUIVANT{\" \"}\n                    <FontAwesomeIcon icon={faArrowCircleRight} size=\"lg\" />\n                  </Button>\n                </div>\n              </Col>\n            </Row>\n          </div>\n        )}\n      </main>\n    );\n  }\n}\n\nexport default Configurator;\n","/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/components/contact/contact.tsx",["154","155"],"import React from \"react\";\nimport {\n  InputGroup,\n  FormControl,\n  Row,\n  Col,\n  Button,\n  Form,\n} from \"react-bootstrap\";\nimport \"./contact.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faUser,\n  faAt,\n  faComment,\n  faPaperPlane,\n  faCheck,\n  faTimes,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport ReactDOMServer from \"react-dom/server\";\nimport { Formik } from \"formik\";\nimport { FormValues } from \"./models\";\nimport * as Yup from \"yup\";\n\nclass Contact extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      success: 0,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.sendEmail = this.sendEmail.bind(this);\n  }\n  schema = Yup.object().shape({\n    firstname: Yup.string()\n      .min(2, \"Trop court !\")\n      .required(\"Le prénom est requis\"),\n    lastname: Yup.string().min(2, \"Trop court !\"),\n    content: Yup.string().min(10, \"Trop court !\"),\n    subject: Yup.string().min(5, \"Trop court !\"),\n    email: Yup.string().email(\"L'email doit avoir un format valide\"),\n  });\n  initialValues: FormValues = {\n    firstname: \"\",\n    lastname: \"\",\n    content: \"\",\n    subject: \"\",\n    email: \"\",\n  };\n  handleChange(event: any) {\n    let nam = event.target.name;\n    let val = event.target.value;\n    this.setState({ [nam]: val });\n  }\n  sendEmail(values: FormValues) {\n    fetch(`${process.env.REACT_APP_API_BASE_URL}/utils/sendEmail`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        email: values.email,\n        subject: \"Formulaire de contact\",\n        content: this.htmlMail(\n          values.firstname,\n          values.lastname,\n          values.email,\n          values.subject,\n          values.content\n        ),\n      }),\n    }).then(\n      (result) => {\n        this.setState({ success: 1 });\n      },\n      (error) => {\n        this.setState({ success: -1 });\n      }\n    );\n  }\n\n  htmlMail(\n    firstname: string,\n    lastname: string,\n    email: string,\n    subject: string,\n    content: string\n  ) {\n    return ReactDOMServer.renderToString(\n      <div>\n        <h2>\n          ConfigUr\n          <br />\n          <span style={{ color: \"#1a7c7d\" }}>house.</span>\n        </h2>\n        <p>\n          Un utilisateur a envoyé un email avec le formulaire de contact de\n          l'application ConfigUrHouse\n        </p>\n        <h4 style={{ color: \"#1a7c7d\" }}>Informations du contact :</h4>\n\n        <ul>\n          <li>\n            Nom/Prénom : {firstname} {lastname}\n          </li>\n          <li>Email : {email}</li>\n          <li>Sujet : {subject}</li>\n        </ul>\n\n        <h4 style={{ color: \"#1a7c7d\" }}>Contenu du message :</h4>\n        <p>{content}</p>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <main className=\"p-5 w-100 bg\">\n        <div className=\"circle1\"></div>\n        <div className=\"circle2\"></div>\n        <div className=\"p-5 form w-75 mx-auto\">\n          <h3 className=\"mb-2\">\n            <FontAwesomeIcon className=\"mr-2\" icon={faPaperPlane} /> Nous\n            contacter\n          </h3>\n          <p className=\"mb-4\">\n            Vous pouvez nous contacter à travers ce formulaire dans le cas d'un\n            problème, d'une question ou de toutes autres demandes. Nous nous\n            engageons à vous répondre au plus vite.\n          </p>\n          {(this.state.success == 1 && (\n            <div className=\"alert alert-success mb-4\">\n              <FontAwesomeIcon icon={faCheck} /> Email envoyé avec succès, nous\n              vous réponderons au plus vite.\n            </div>\n          )) ||\n            (this.state.success == -1 && (\n              <div className=\"alert alert-danger m-4\">\n                <FontAwesomeIcon icon={faTimes} /> Une erreur est survenue lors\n                de l'envoi du mail, veuillez réessayer plus tard.\n              </div>\n            )) ||\n            \"\"}\n          <Formik\n            validationSchema={this.schema}\n            onSubmit={(values, { resetForm }) => {\n              this.sendEmail(values);\n              resetForm({\n                values: {\n                  firstname: \"\",\n                  lastname: \"\",\n                  content: \"\",\n                  subject: \"\",\n                  email: \"\",\n                },\n              });\n            }}\n            initialValues={this.initialValues}\n          >\n            {({ handleSubmit, handleChange, values, errors }) => (\n              <Form noValidate onSubmit={handleSubmit}>\n                <Row>\n                  <Col md={6}>\n                    <InputGroup className=\"mb-3\">\n                      <InputGroup.Prepend>\n                        <InputGroup.Text id=\"FirstnameIcon\">\n                          <FontAwesomeIcon icon={faUser} />\n                        </InputGroup.Text>\n                      </InputGroup.Prepend>\n                      <FormControl\n                        placeholder=\"Prénom\"\n                        name=\"firstname\"\n                        value={values.firstname}\n                        onChange={(e) => {\n                          this.setState({ formValues: values });\n                          handleChange(e);\n                        }}\n                        isInvalid={!!errors.firstname}\n                      />\n                      <Form.Control.Feedback type=\"invalid\">\n                        {errors.firstname}\n                      </Form.Control.Feedback>\n                    </InputGroup>\n                  </Col>\n                  <Col md={6}>\n                    <InputGroup className=\"mb-3\">\n                      <InputGroup.Prepend>\n                        <InputGroup.Text id=\"LastnameIcon\">\n                          <FontAwesomeIcon icon={faUser} />\n                        </InputGroup.Text>\n                      </InputGroup.Prepend>\n                      <FormControl\n                        placeholder=\"Nom de famille\"\n                        name=\"lastname\"\n                        value={values.lastname}\n                        onChange={(e) => {\n                          this.setState({ formValues: values });\n                          handleChange(e);\n                        }}\n                        isInvalid={!!errors.lastname}\n                      />\n                      <Form.Control.Feedback type=\"invalid\">\n                        {errors.lastname}\n                      </Form.Control.Feedback>\n                    </InputGroup>\n                  </Col>\n                </Row>\n\n                <InputGroup className=\"mb-3\">\n                  <InputGroup.Prepend>\n                    <InputGroup.Text id=\"MailIcon\">\n                      <FontAwesomeIcon icon={faAt} />\n                    </InputGroup.Text>\n                  </InputGroup.Prepend>\n                  <FormControl\n                    placeholder=\"Adresse email\"\n                    name=\"email\"\n                    value={values.email}\n                    onChange={(e) => {\n                      this.setState({ formValues: values });\n                      handleChange(e);\n                    }}\n                    isInvalid={!!errors.email}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.email}\n                  </Form.Control.Feedback>\n                </InputGroup>\n                <InputGroup className=\"mb-3\">\n                  <InputGroup.Prepend>\n                    <InputGroup.Text id=\"SubjectIcon\">\n                      <FontAwesomeIcon icon={faComment} />\n                    </InputGroup.Text>\n                  </InputGroup.Prepend>\n                  <FormControl\n                    placeholder=\"Sujet\"\n                    name=\"subject\"\n                    value={values.subject}\n                    onChange={(e) => {\n                      this.setState({ formValues: values });\n                      handleChange(e);\n                    }}\n                    isInvalid={!!errors.subject}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.subject}\n                  </Form.Control.Feedback>\n                </InputGroup>\n\n                <FormControl\n                  as=\"textarea\"\n                  placeholder=\"Votre message\"\n                  name=\"content\"\n                  value={values.content}\n                  onChange={(e) => {\n                    this.setState({ formValues: values });\n                    handleChange(e);\n                  }}\n                  isInvalid={!!errors.content}\n                />\n                <Form.Control.Feedback type=\"invalid\">\n                  {errors.content}\n                </Form.Control.Feedback>\n                <Button\n                  variant=\"primary\"\n                  className=\"d-block mx-auto mt-3 p-3\"\n                  type=\"submit\"\n                >\n                  ENVOYER LE MESSAGE{\" \"}\n                  <FontAwesomeIcon className=\"ml-2\" icon={faPaperPlane} />\n                </Button>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default Contact;\n","/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/components/house-models/house-model-list/house-model-list.tsx",[],"/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/components/configuration/configuration.tsx",[],"/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/components/house-models/house-model-edit/house-model-edit.tsx",[],"/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/components/policies/policies.tsx",[],"/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/components/home/home.tsx",[],"/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/components/configuration-options/configuration-option-edit/configuration-option-edit.tsx",["156"],"import {\n  faHome,\n  faSave,\n  faTimes,\n  faKeyboard,\n  faCube,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Formik } from \"formik\";\nimport React from \"react\";\nimport {\n  Button,\n  Col,\n  Form,\n  FormControl,\n  InputGroup,\n  Row,\n} from \"react-bootstrap\";\nimport { useParams, withRouter } from \"react-router\";\nimport * as Yup from \"yup\";\nimport { ApiResponseError } from \"../../../api/models\";\nimport { apiRequest } from \"../../../api/utils\";\nimport {\n  ConfigurationOptionEditProps,\n  ConfigurationOptionEditState,\n} from \"./models\";\nimport { ConfigurationOption, HouseModel, Mesh } from \"../../../models\";\nimport \"./configuration-option-edit.css\";\nimport { PaginatedResponse } from \"../../../utils/pagination\";\n\nclass ConfigurationOptionEdit extends React.Component<\n  ConfigurationOptionEditProps,\n  ConfigurationOptionEditState\n> {\n  private schema = Yup.object().shape({\n    name: Yup.string()\n      .min(4, \"Le nom doit faire plus de 3 charactères\")\n      .required(\"Le nom ne peut pas être vide\"),\n    id_HouseModel: Yup.lazy(() =>\n      Yup.number().oneOf(\n        [...this.state.houseModels.map((houseModel) => houseModel.id)],\n        \"Le modèle ne peut pas être vide\"\n      )\n    ),\n    id_Mesh: Yup.lazy(() =>\n      Yup.number().oneOf(\n        [...this.state.meshes.map((mesh) => mesh.id)],\n        \"Le mesh ne peut pas être vide\"\n      )\n    ),\n  });\n\n  private initialItem: ConfigurationOption = {\n    id: 0,\n    name: \"\",\n    id_HouseModel: 0,\n    id_Mesh: 0,\n  };\n\n  constructor(props: ConfigurationOptionEditProps) {\n    super(props);\n\n    this.fetchConfigurationOption = this.fetchConfigurationOption.bind(this);\n    this.fetchHouseModels = this.fetchHouseModels.bind(this);\n    this.fetchMeshes = this.fetchMeshes.bind(this);\n    this.submitForm = this.submitForm.bind(this);\n\n    const id = parseInt(props.match.params.id ?? 0);\n\n    this.state = {\n      editMode: id !== 0,\n      item: { ...this.initialItem, id },\n      houseModels: [],\n      meshes: [],\n      error: undefined,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchHouseModels();\n    this.fetchMeshes();\n    if (this.state.editMode) {\n      this.fetchConfigurationOption();\n    }\n  }\n\n  async fetchConfigurationOption(): Promise<void> {\n    try {\n      const response: ConfigurationOption = await apiRequest(\n        `optionConf/${this.state.item.id}`,\n        \"GET\",\n        []\n      );\n      this.setState({ item: response });\n    } catch (error: any) {\n      console.error(error);\n      this.setState({ error: error as ApiResponseError });\n    }\n  }\n\n  async fetchMeshes(): Promise<void> {\n    try {\n      const response: Mesh[] = await apiRequest(`mesh`, \"GET\", []);\n      this.setState({ meshes: response });\n    } catch (error: any) {\n      console.error(error);\n      this.setState({ error: error as ApiResponseError });\n    }\n  }\n\n  async fetchHouseModels(): Promise<void> {\n    try {\n      const response: PaginatedResponse<HouseModel> = await apiRequest(\n        `houseModel`,\n        \"GET\",\n        []\n      );\n      this.setState({ houseModels: response.items });\n    } catch (error: any) {\n      console.error(error);\n      this.setState({ error: error as ApiResponseError });\n    }\n  }\n\n  async submitForm(values: ConfigurationOption): Promise<void> {\n    try {\n      const { editMode } = this.state;\n\n      await (editMode\n        ? apiRequest(`optionConf/${values.id}`, \"PUT\", \"\", values)\n        : apiRequest(`optionConf`, \"POST\", \"\", values));\n\n      this.props.history.push(\"/configurationOptions\");\n    } catch (error) {\n      console.error(error);\n      this.setState({ error: error as ApiResponseError });\n    }\n  }\n\n  render() {\n    const { item, editMode, houseModels, meshes, error } = this.state;\n    console.table(houseModels);\n    return (\n      <main className=\"p-5 w-100 bg\">\n        <div className=\"circle1\"></div>\n        <div className=\"circle2\"></div>\n        <div className=\"p-5 form w-75 mx-auto\">\n          {error && (\n            <div className=\"alert alert-danger m-4\">\n              <FontAwesomeIcon icon={faTimes} />\n              Une erreur est survenue :<p>Message : {error.message}</p>\n            </div>\n          )}\n          <h3 className=\"mb-5\">\n            <FontAwesomeIcon className=\"mr-2\" icon={faHome} />\n            {editMode ? \"Editer\" : \"Ajouter\"} une option\n          </h3>\n          <Formik\n            validationSchema={this.schema}\n            onSubmit={(values) => {\n              this.submitForm(values);\n            }}\n            initialValues={item}\n            enableReinitialize\n            validateOnMount={true}\n          >\n            {({\n              handleSubmit,\n              handleChange,\n              values,\n              errors,\n              isValid,\n              submitCount,\n            }) => (\n              <Form onSubmit={handleSubmit}>\n                <Row>\n                  <Col md={4} sm={12}>\n                    <InputGroup className=\"mb-3\">\n                      <InputGroup.Prepend>\n                        <InputGroup.Text id=\"NameIcon\">\n                          <FontAwesomeIcon icon={faKeyboard} />\n                        </InputGroup.Text>\n                      </InputGroup.Prepend>\n                      <FormControl\n                        placeholder=\"Nom\"\n                        name=\"name\"\n                        value={values.name}\n                        onChange={(e) => handleChange(e)}\n                        isInvalid={!!(submitCount > 0 && errors.name)}\n                      />\n                      <Form.Control.Feedback type=\"invalid\">\n                        {errors.name}\n                      </Form.Control.Feedback>\n                    </InputGroup>\n                  </Col>\n                  <Col md={4} sm={12}>\n                    <InputGroup className=\"mb-3\">\n                      <InputGroup.Prepend>\n                        <InputGroup.Text id=\"ModelIcon\">\n                          <FontAwesomeIcon icon={faHome} />\n                        </InputGroup.Text>\n                      </InputGroup.Prepend>\n                      <FormControl\n                        placeholder=\"Modèle\"\n                        name=\"id_HouseModel\"\n                        as=\"select\"\n                        value={values.id_HouseModel}\n                        onChange={(e) => handleChange(e)}\n                        isInvalid={!!(submitCount > 0 && errors.id_HouseModel)}\n                      >\n                        <option value={0}>Choisir un modèle</option>\n                        {houseModels.map((houseModel) => (\n                          <option key={houseModel.id} value={houseModel.id}>\n                            {houseModel.name}\n                          </option>\n                        ))}\n                      </FormControl>\n                      <Form.Control.Feedback type=\"invalid\">\n                        {errors.id_HouseModel}\n                      </Form.Control.Feedback>\n                    </InputGroup>\n                  </Col>\n                  <Col md={4} sm={12}>\n                    <InputGroup className=\"mb-3\">\n                      <InputGroup.Prepend>\n                        <InputGroup.Text id=\"ModelIcon\">\n                          <FontAwesomeIcon icon={faCube} />\n                        </InputGroup.Text>\n                      </InputGroup.Prepend>\n                      <FormControl\n                        placeholder=\"Asset\"\n                        name=\"id_Mesh\"\n                        as=\"select\"\n                        value={values.id_Mesh}\n                        onChange={(e) => handleChange(e)}\n                        isInvalid={!!(submitCount > 0 && errors.id_Mesh)}\n                      >\n                        <option value={0}>Choisir un mesh</option>\n                        {meshes.map((mesh) => (\n                          <option key={mesh.id} value={mesh.id}>\n                            {mesh.name}\n                          </option>\n                        ))}\n                      </FormControl>\n                      <Form.Control.Feedback type=\"invalid\">\n                        {errors.id_Mesh}\n                      </Form.Control.Feedback>\n                    </InputGroup>\n                  </Col>\n                </Row>\n                <Button\n                  variant=\"primary\"\n                  className=\"d-block mx-auto mt-3 p-3\"\n                  type=\"submit\"\n                  disabled={submitCount > 0 && !isValid}\n                >\n                  SAUVEGARDER <FontAwesomeIcon className=\"ml-2\" icon={faSave} />\n                </Button>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default withRouter(ConfigurationOptionEdit);\n","/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/components/configuration-options/configuration-option-list/configuration-option-list.tsx",[],"/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/api/utils.ts",[],"/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/utils/pagination.ts",[],"/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/components/user/user-configurations/user-configurations.tsx",[],"/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/components/logout/logout.tsx",[],"/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/components/user/user-account-delete/user-account-delete.tsx",["157","158"],"import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faCheck,\n  faPaperPlane,\n  faTimes,\n  faUserAltSlash,\n  faUserShield,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { Form, Row, Col, FormControl, Button } from \"react-bootstrap\";\nimport ReactDOMServer from \"react-dom/server\";\n\nclass UserAccountDelete extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      reason: \"\",\n      user: {\n        id: 1,\n        firstname: \"prenom\",\n        lastname: \"nom\",\n        email: \"test@configurhouse.com\",\n        active: 1,\n      },\n    };\n\n    this.sendEmail = this.sendEmail.bind(this);\n  }\n  sendEmail() {\n    fetch(process.env.REACT_APP_API_BASE_URL + \"/utils/sendEmail\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        email: this.state.user.email,\n        subject: \"Demande de suppression de compte\",\n        content: this.htmlMail(this.state.reason),\n      }),\n    }).then(\n      (result) => {\n        this.setState({ success: 1 });\n      },\n      (error) => {\n        this.setState({ success: -1 });\n      }\n    );\n  }\n  htmlMail(reason: string) {\n    return ReactDOMServer.renderToString(\n      <div>\n        <h2>\n          ConfigUr\n          <br />\n          <span style={{ color: \"#1a7c7d\" }}>house.</span>\n        </h2>\n        <p>\n          Un utilisateur a effectué une demande de suppression de son compte\n        </p>\n        <h4 style={{ color: \"#1a7c7d\" }}>Informations du compte :</h4>\n\n        <ul>\n          <li>\n            Nom/Prénom : {this.state.user.firstname} {this.state.user.lastname}{\" \"}\n          </li>\n          <li>Email : {this.state.user.email}</li>\n          <li>ID : {this.state.user.id}</li>\n        </ul>\n\n        <h4 style={{ color: \"#1a7c7d\" }}>\n          Raison de la demande de suppression :\n        </h4>\n        <p>{reason}</p>\n      </div>\n    );\n  }\n  render() {\n    let alert;\n    if (this.state.success == 1) {\n      alert = (\n        <div className=\"alert alert-success mb-4\">\n          <FontAwesomeIcon icon={faCheck} /> Demande envoyée avec succès, nous\n          la traiterons au plus vite.\n        </div>\n      );\n    } else if (this.state.success == -1) {\n      alert = (\n        <div className=\"alert alert-danger m-4\">\n          <FontAwesomeIcon icon={faTimes} /> Une erreur est survenue lors de\n          l'envoi de la demande, veuillez réessayer plus tard.\n        </div>\n      );\n    } else {\n      alert = null;\n    }\n    return (\n      <main className=\"p-5 w-100 bg-white m-0 user-accountdelete\">\n        <h2 className=\"text-green text-center\">\n          <FontAwesomeIcon icon={faUserShield} /> Suppression du compte\n        </h2>\n        <h6 className=\"text-center mt-2 mb-5\">\n          Vous pouvez ici demander la suppression de votre compte.\n        </h6>\n        <hr />\n        <h4 className=\"mt-5 text-green text-center mb-4\">\n          <FontAwesomeIcon icon={faUserAltSlash} /> Demander la suppression de\n          mon compte :\n        </h4>\n        {alert}\n        <Form className=\"form shadow-none\" onSubmit={this.sendEmail}>\n          <Row className=\"justify-content-center\">\n            <Col md={6}>\n              <p className=\"mb-2 ml-3 text-center\">\n                Raison de la demande de suppression :\n              </p>\n              <FormControl\n                as=\"textarea\"\n                onChange={(e) => {\n                  this.setState({ reason: e.target.value });\n                }}\n              ></FormControl>\n              <Button\n                variant=\"primary\"\n                className=\"d-block mx-auto mt-3 p-3\"\n                onClick={this.sendEmail}\n              >\n                ENVOYER LA DEMANDE{\" \"}\n                <FontAwesomeIcon className=\"ml-2\" icon={faPaperPlane} />\n              </Button>\n            </Col>\n          </Row>\n        </Form>\n\n        <div className=\"circle1\"></div>\n        <div className=\"circle2\"></div>\n      </main>\n    );\n  }\n}\n\nexport default UserAccountDelete;\n","/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/components/user/user-policies/user-policies.tsx",["159","160","161","162","163"],"import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faUserShield,\n  faCheck,\n  faTimes,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { Form, Row, Col } from \"react-bootstrap\";\nimport { apiRequest } from \"../../../api/utils\";\nimport { ApiResponseError } from \"../../../api/models\";\n\nclass UserPolicies extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      polices: [],\n      userPolices: [],\n      success: 0,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchPolice();\n    this.fetchUserPolice();\n  }\n\n  async fetchPolice() {\n    try {\n      const polices: any = await apiRequest(\"police\", \"GET\");\n\n      this.setState({ polices: polices });\n    } catch (error) {\n      this.setState({ polices: [] });\n    }\n  }\n\n  async fetchUserPolice() {\n    try {\n      const userId = await window.localStorage.getItem(\"userId\");\n\n      const userPolices: any = await apiRequest(\"userPolice/\" + userId, \"GET\");\n      this.setState({ userPolices: userPolices });\n    } catch (error) {\n      this.setState({ userPolices: [] });\n    }\n  }\n  async handleChange(event: any) {\n    if (event.target.value == \"false\") {\n      try {\n        const response = await apiRequest(\n          `userPolice/${event.target.name}`,\n          \"DELETE\",\n          []\n        );\n\n        if (response.status === \"error\") {\n          this.setState({ error: response as ApiResponseError });\n        } else {\n          this.fetchUserPolice();\n          this.setState({ success: 1 });\n        }\n      } catch (error) {\n        this.setState({ success: -1 });\n      }\n    } else {\n      const userId = await window.localStorage.getItem(\"userId\");\n\n      apiRequest(`userPolice`, \"POST\", \"\", {\n        id_User: userId,\n        id_Police: event.target.name,\n      })\n        .then((response) => {\n          if (response.status === \"error\") {\n            this.setState({ error: response as ApiResponseError });\n          } else {\n            this.fetchUserPolice();\n            this.setState({ success: 1 });\n          }\n        })\n        .catch(() => this.setState({ success: -1 }));\n    }\n  }\n  render() {\n    let alertDiv;\n    if (this.state.success == 1) {\n      alertDiv = (\n        <div className=\"alert alert-success mb-4\">\n          <FontAwesomeIcon icon={faCheck} /> Préférences changées avec succès\n        </div>\n      );\n    } else if (this.state.success == -1) {\n      alertDiv = (\n        <div className=\"alert alert-danger m-4\">\n          <FontAwesomeIcon icon={faTimes} /> Une erreur est survenue lors du\n          changement des préférences\n        </div>\n      );\n    }\n\n    return (\n      <main className=\"p-5 w-100 bg-white m-0 user-policies\">\n        <h2 className=\"text-green text-center\">\n          <FontAwesomeIcon icon={faUserShield} /> Mes politiques de\n          confidentialité\n        </h2>\n        <h6 className=\"text-center mt-2 mb-5\">\n          Vous pouvez ici gérer votre préférences de confidentialité\n          (utilisation de vos données, ...).\n        </h6>\n        <hr />\n        <h4 className=\"mt-5 text-green mb-4\">\n          <FontAwesomeIcon icon={faUserShield} /> Gérer mes préférences de\n          gestion de mes données :\n        </h4>\n\n        {alertDiv}\n        {this.state.polices.map((police: any, i: number) => (\n          <Row key={i}>\n            <Col md={6}>\n              <p>{police.description}</p>\n            </Col>\n            <Col md={2}>\n              <Form.Check\n                type=\"radio\"\n                label=\"Oui\"\n                name={police.id}\n                inline\n                id={police.name + \"_yes\"}\n                value=\"true\"\n                checked={\n                  this.state.userPolices.filter(\n                    (p: any) => p.id_Police == police.id\n                  ).length > 0\n                }\n                onChange={this.handleChange.bind(this)}\n              />\n              <Form.Check\n                type=\"radio\"\n                label=\"Non\"\n                inline\n                name={police.id}\n                id={police.name + \"_no\"}\n                value=\"false\"\n                checked={\n                  this.state.userPolices.filter(\n                    (p: any) => p.id_Police == police.id\n                  ).length <= 0\n                }\n                onChange={this.handleChange.bind(this)}\n              />\n            </Col>\n          </Row>\n        ))}\n\n        <div className=\"circle1\"></div>\n        <div className=\"circle2\"></div>\n      </main>\n    );\n  }\n}\n\nexport default UserPolicies;\n","/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/components/templates/items-table/items-table.tsx",[],"/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/components/templates/editor-field/editor-field.tsx",[],"/Users/benjaminragot/Sites/ConfigUrHouse/configurhouse/src/components/3d/3d.tsx",["164","165","166"],"import React, { Suspense, useRef, useState, useEffect } from \"react\"\nimport { Canvas, useFrame } from \"react-three-fiber\"\nimport { ContactShadows, Environment, useGLTF, OrbitControls } from \"drei\"\nimport { HexColorPicker } from \"react-colorful\"\nimport { proxy, useProxy } from \"valtio\"\n\ninterface test {\n  current: any,\n  items: any\n} \n\n// Using a Valtio state model to bridge reactivity between\n// the canvas and the dom, both can write to it and/or react to it.\nconst objectTest : test = {\n  current: null,\n  items: {\n    laces: \"#ffffff\",\n    mesh: \"#ffffff\",\n    caps: \"#ffffff\",\n    inner: \"#ffffff\",\n    sole: \"#ffffff\",\n    stripes: \"#ffffff\",\n    band: \"#ffffff\",\n    patch: \"#ffffff\",\n  },\n}\n\nconst state = proxy(objectTest);\n\nfunction Shoe() {\n  const ref = useRef()\n  const snap = useProxy(state)\n  // Drei's useGLTF hook sets up draco automatically, that's how it differs from useLoader(GLTFLoader, url)\n  // { nodes, materials } are extras that come from useLoader, these do not exist in threejs/GLTFLoader\n  // nodes is a named collection of meshes, materials a named collection of materials\n  const { nodes, materials } = useGLTF(\"shoe-draco.glb\")\n\n  // Animate model\n  useFrame((state) => {\n    const t = state.clock.getElapsedTime();\n\n    (ref as any).current.rotation.z = -0.2 - (1 + Math.sin(t / 1.5)) / 20;\n    (ref as any).current.rotation.x = Math.cos(t / 4) / 8;\n    (ref as any).current.rotation.y = Math.sin(t / 4) / 8;\n    (ref as any).current.position.y = (1 + Math.sin(t / 1.5)) / 10;\n  })\n\n  // Cursor showing current color\n  const [hovered, set] = useState(null)\n  useEffect(() => {\n    const cursor = `<svg width=\"64\" height=\"64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><g clip-path=\"url(#clip0)\"><path fill=\"rgba(255, 255, 255, 0.5)\" d=\"M29.5 54C43.031 54 54 43.031 54 29.5S43.031 5 29.5 5 5 15.969 5 29.5 15.969 54 29.5 54z\" stroke=\"#000\"/><g filter=\"url(#filter0_d)\"><path d=\"M29.5 47C39.165 47 47 39.165 47 29.5S39.165 12 29.5 12 12 19.835 12 29.5 19.835 47 29.5 47z\" fill=\"${snap.items[(hovered as any)]}\"/></g><path d=\"M2 2l11 2.947L4.947 13 2 2z\" fill=\"#000\"/><text fill=\"#000\" style=\"white-space:pre\" font-family=\"Inter var, sans-serif\" font-size=\"10\" letter-spacing=\"-.01em\"><tspan x=\"35\" y=\"63\">${hovered}</tspan></text></g><defs><clipPath id=\"clip0\"><path fill=\"#fff\" d=\"M0 0h64v64H0z\"/></clipPath><filter id=\"filter0_d\" x=\"6\" y=\"8\" width=\"47\" height=\"47\" filterUnits=\"userSpaceOnUse\" color-interpolation-filters=\"sRGB\"><feFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"/><feColorMatrix in=\"SourceAlpha\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"/><feOffset dy=\"2\"/><feGaussianBlur stdDeviation=\"3\"/><feColorMatrix values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\"/><feBlend in2=\"BackgroundImageFix\" result=\"effect1_dropShadow\"/><feBlend in=\"SourceGraphic\" in2=\"effect1_dropShadow\" result=\"shape\"/></filter></defs></svg>`\n    const auto = `<svg width=\"64\" height=\"64\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"rgba(255, 255, 255, 0.5)\" d=\"M29.5 54C43.031 54 54 43.031 54 29.5S43.031 5 29.5 5 5 15.969 5 29.5 15.969 54 29.5 54z\" stroke=\"#000\"/><path d=\"M2 2l11 2.947L4.947 13 2 2z\" fill=\"#000\"/></svg>`\n    document.body.style.cursor = `url('data:image/svg+xml;base64,${btoa(hovered ? cursor : auto)}'), auto`\n  }, [hovered])\n\n  // Using the GLTFJSX output here to wire in app-state and hook up events\n  return (\n    <group\n      ref={ref}\n      dispose={null}\n      onPointerOver={(e) => (e.stopPropagation(), set((e.object as any).material.name))}\n      onPointerOut={(e) => e.intersections.length === 0 && set(null)}\n      onPointerMissed={() => (state.current = null)}\n      onPointerDown={(e) => (e.stopPropagation(), (state.current = (e.object as any).material.name))}>\n      <mesh geometry={(nodes.shoe as any).geometry} material={materials.laces} material-color={snap.items.laces} />\n      <mesh geometry={(nodes.shoe_1 as any).geometry} material={materials.mesh} material-color={snap.items.mesh} />\n      <mesh geometry={(nodes.shoe_2 as any).geometry} material={materials.caps} material-color={snap.items.caps} />\n      <mesh geometry={(nodes.shoe_3 as any).geometry} material={materials.inner} material-color={snap.items.inner} />\n      <mesh geometry={(nodes.shoe_4 as any).geometry} material={materials.sole} material-color={snap.items.sole} />\n      <mesh geometry={(nodes.shoe_5 as any).geometry} material={materials.stripes} material-color={snap.items.stripes} />\n      <mesh geometry={(nodes.shoe_6 as any).geometry} material={materials.band} material-color={snap.items.band} />\n      <mesh geometry={(nodes.shoe_7 as any).geometry} material={materials.patch} material-color={snap.items.patch} />\n    </group>\n  )\n}\n\nfunction Picker() {\n  const snap = useProxy(state)\n  return (\n    <div style={{ display: snap.current ? \"block\" : \"none\" }}>\n      <HexColorPicker className=\"picker\" color={snap.items[snap.current]} onChange={(color) => (state.items[snap.current] = color)} />\n      <h1>{snap.current}</h1>\n    </div>\n  )\n}\n\nexport default function Model() {\n  return (\n    <>\n      <Canvas concurrent pixelRatio={[1, 2]} camera={{ position: [0, 0, 2.75] }}>\n        <ambientLight intensity={0.3} />\n        <spotLight intensity={0.3} angle={0.1} penumbra={1} position={[5, 25, 20]} />\n        <Suspense fallback={null}>\n          <Shoe />\n          <Environment files=\"royal_esplanade_1k.hdr\" />\n          <ContactShadows rotation-x={Math.PI / 2} position={[0, -0.8, 0]} opacity={0.25} width={10} height={10} blur={2} far={1} />\n        </Suspense>\n        <OrbitControls minPolarAngle={Math.PI / 2} maxPolarAngle={Math.PI / 2} enableZoom={false} enablePan={false} />\n      </Canvas>\n      <Picker />\n    </>\n  )\n}\n",["167","168"],{"ruleId":"169","severity":1,"message":"170","line":5,"column":8,"nodeType":"171","messageId":"172","endLine":5,"endColumn":23},{"ruleId":"173","severity":1,"message":"174","line":38,"column":6,"nodeType":"175","endLine":38,"endColumn":8,"suggestions":"176"},{"ruleId":"177","severity":1,"message":"178","line":10,"column":3,"nodeType":"179","messageId":"180","endLine":12,"endColumn":4},{"ruleId":"169","severity":1,"message":"181","line":21,"column":11,"nodeType":"171","messageId":"172","endLine":21,"endColumn":17},{"ruleId":"182","severity":1,"message":"183","line":65,"column":36,"nodeType":"184","messageId":"185","endLine":65,"endColumn":38},{"ruleId":"182","severity":1,"message":"183","line":86,"column":28,"nodeType":"184","messageId":"185","endLine":86,"endColumn":30},{"ruleId":"182","severity":1,"message":"183","line":93,"column":35,"nodeType":"184","messageId":"185","endLine":93,"endColumn":37},{"ruleId":"182","severity":1,"message":"183","line":33,"column":46,"nodeType":"184","messageId":"185","endLine":33,"endColumn":48},{"ruleId":"182","severity":1,"message":"183","line":83,"column":46,"nodeType":"184","messageId":"185","endLine":83,"endColumn":48},{"ruleId":"182","severity":1,"message":"183","line":129,"column":32,"nodeType":"184","messageId":"185","endLine":129,"endColumn":34},{"ruleId":"182","severity":1,"message":"183","line":135,"column":33,"nodeType":"184","messageId":"185","endLine":135,"endColumn":35},{"ruleId":"169","severity":1,"message":"186","line":19,"column":10,"nodeType":"171","messageId":"172","endLine":19,"endColumn":19},{"ruleId":"182","severity":1,"message":"183","line":77,"column":28,"nodeType":"184","messageId":"185","endLine":77,"endColumn":30},{"ruleId":"182","severity":1,"message":"183","line":84,"column":35,"nodeType":"184","messageId":"185","endLine":84,"endColumn":37},{"ruleId":"182","severity":1,"message":"183","line":48,"column":28,"nodeType":"184","messageId":"185","endLine":48,"endColumn":30},{"ruleId":"182","severity":1,"message":"183","line":85,"column":28,"nodeType":"184","messageId":"185","endLine":85,"endColumn":30},{"ruleId":"182","severity":1,"message":"183","line":91,"column":35,"nodeType":"184","messageId":"185","endLine":91,"endColumn":37},{"ruleId":"182","severity":1,"message":"183","line":132,"column":45,"nodeType":"184","messageId":"185","endLine":132,"endColumn":47},{"ruleId":"182","severity":1,"message":"183","line":146,"column":45,"nodeType":"184","messageId":"185","endLine":146,"endColumn":47},{"ruleId":"173","severity":1,"message":"187","line":54,"column":6,"nodeType":"175","endLine":54,"endColumn":15,"suggestions":"188"},{"ruleId":"189","severity":1,"message":"190","line":61,"column":49,"nodeType":"191","messageId":"192","endLine":61,"endColumn":50},{"ruleId":"189","severity":1,"message":"190","line":64,"column":49,"nodeType":"191","messageId":"192","endLine":64,"endColumn":50},{"ruleId":"193","replacedBy":"194"},{"ruleId":"195","replacedBy":"196"},"@typescript-eslint/no-unused-vars","'reportWebVitals' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'checkAuthenticationConnect'. Either include it or remove the dependency array. If 'checkAuthenticationConnect' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["197"],"@typescript-eslint/no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'IProps' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useParams' is defined but never used.","React Hook useEffect has a missing dependency: 'snap.items'. Either include it or remove the dependency array.",["198"],"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","no-native-reassign",["199"],"no-negated-in-lhs",["200"],{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [checkAuthenticationConnect]",{"range":"205","text":"206"},"Update the dependencies array to be: [hovered, snap.items]",{"range":"207","text":"208"},[1904,1906],"[checkAuthenticationConnect]",[3294,3303],"[hovered, snap.items]"]